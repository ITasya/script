const axios = require('axios');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

// üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const webhook = 'https://trudex.bitrix24.ru/rest/1/8m4dc7w0sw792wd8/';
const sourceStageId = 'UC_UX6XY1';
const targetStageId = 'UC_X03LAW';
const batchSize = 3;
const dailyLimit = 30;
const startHour = 12; // ‚è∞ –° –∫–∞–∫–æ–≥–æ —á–∞—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–ø—É—Å–∫

const logFilePath = path.join(__dirname, 'deal-transfer.log');
const counterFilePath = path.join(__dirname, 'daily-counter.json');

// üìÑ –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
function writeLog(message) {
  const timestamp = new Date().toISOString();
  const fullMessage = `[${timestamp}] ${message}\n`;
  fs.appendFileSync(logFilePath, fullMessage, 'utf8');
  console.log(message);
}

// üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—á—ë—Ç—á–∏–∫
function getTodayKey() {
  const now = new Date();
  return now.toISOString().split('T')[0]; // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
}

function loadCounter() {
  if (!fs.existsSync(counterFilePath)) return {};
  const raw = fs.readFileSync(counterFilePath, 'utf8');
  return JSON.parse(raw);
}

function saveCounter(counter) {
  fs.writeFileSync(counterFilePath, JSON.stringify(counter, null, 2), 'utf8');
}

// üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–∫–∏
async function updateDealStage(dealId, newStageId) {
  const url = `${webhook}crm.deal.update.json`;
  const params = {
    id: dealId,
    fields: { STAGE_ID: newStageId },
  };

  try {
    const response = await axios.post(url, null, { params });
    if (response.data.result) {
      writeLog(`‚úÖ –°–¥–µ–ª–∫–∞ ${dealId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞–¥–∏—é ${newStageId}`);
    } else {
      writeLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ ${dealId}: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    writeLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–¥–µ–ª–∫–∏ ${dealId}: ${error.message}`);
  }
}

// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
async function getDealsFromStage(stageId, limit) {
  const url = `${webhook}crm.deal.list.json`;
  const params = {
    order: { ID: 'ASC' },
    filter: { STAGE_ID: stageId },
    select: ['ID'],
    start: -1,
  };

  try {
    const response = await axios.get(url, { params });
    return response.data.result.slice(0, limit);
  } catch (error) {
    writeLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: ${error.message}`);
    return [];
  }
}

function isTimeAllowed() {
  const now = new Date();
  return now.getHours() >= startHour;
}

async function processDeals() {
  if (!isTimeAllowed()) {
    writeLog(`üïí –°–µ–π—á–∞—Å —Ä–∞–Ω—å—à–µ ${startHour}:00. –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞...`);
    return;
  }

  const counter = loadCounter();
  const todayKey = getTodayKey();

  if (!counter[todayKey]) {
    counter[todayKey] = 0;
    writeLog('üÜï –ù–æ–≤—ã–π –¥–µ–Ω—å: —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω');
  }

  if (counter[todayKey] >= dailyLimit) {
    writeLog(`üìõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${dailyLimit} —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`);
    return;
  }

  const remaining = dailyLimit - counter[todayKey];
  const countToProcess = Math.min(batchSize, remaining);

  const deals = await getDealsFromStage(sourceStageId, countToProcess);
  if (!deals.length) {
    writeLog('‚ÑπÔ∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞');
    return;
  }

  for (const deal of deals) {
    await updateDealStage(deal.ID, targetStageId);
    counter[todayKey]++;
  }

  saveCounter(counter);
  writeLog(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫, –≤—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${counter[todayKey]}`);
}

// ‚è± –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
cron.schedule('*/10 * * * *', () => {
  writeLog(`‚è∞ –ó–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç`);
  processDeals();
});

// üí° –î–ª—è —Ç–µ—Å—Ç–∞ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ:
// processDeals();
